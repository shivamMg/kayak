from urllib.parse import quote_plus
from base64 import b64encode

import requests
from requests.exceptions import RequestException

from .utils import OAUTH2_TOKEN_URL, KayakError, FailedRequestError


class TwitterOAuth2:
    """
    Twitter OAuth API wrapper for Application-Only Authentication.
    API Docs: https://dev.twitter.com/oauth/application-only

    Instance of this class requires a Consumer Key and Consumer Secret for
    initiation. Both can be obtained after registering an application at
    https://apps.twitter.com.

    Methods below follow the Twitter API documentation (linked above) for
    obtaining access token.
    """

    def __init__(self, consumer_key, consumer_secret):
        """
        Parameters:
        `consumer_key`: Consumer Key for the Twitter App.
        `consumer_secret`: Consumer Secret for the Twitter App.
        """
        self.consumer_key = consumer_key
        self.consumer_secret = consumer_secret
        self.access_token = ''

    @property
    def bearer_credentials(self):
        """
        Returns Base64 encoded credential.
        Urlencodes both Consumer Key and Consumer Secret, and calculates
        credentials. The credentials must be Base64 encoded as per the API
        documentation.
        """
        encoded_ck = quote_plus(self.consumer_key)
        encoded_cs = quote_plus(self.consumer_secret)

        # Credential format as defined in API Docs
        credentials = '{}:{}'.format(encoded_ck, encoded_cs)
        # Encode to Base64
        b64credentials = b64encode(credentials.encode('ascii'))

        return b64credentials.decode('ascii')

    def request_token(self):
        """
        Sets `self.access_token` using Bearer credentials.

        Requests the Twitter OAuth API server for the access token. In case of
        invalid credentials or invalid token type an Exception is raised.

        Exceptions generated by `requests` module must be handled separately.
        """
        headers = {
            'Authorization': 'Basic {}'.format(self.bearer_credentials),
            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
        }
        data = 'grant_type=client_credentials'

        try:
            response = requests.post(
                OAUTH2_TOKEN_URL, data=data, headers=headers, timeout=5)
        except RequestException:
            raise FailedRequestError

        if response.status_code != requests.codes.ok:
            raise KayakError(
                'Invalid credentials. Could not get Bearer token.')

        response_body = response.json()
        if response_body.get('token_type', '') == 'bearer':
            # Set Access token
            self.access_token = response_body.get('access_token')
        else:
            raise KayakError('Invalid token type. Token type is not `bearer`.')

        return self.access_token

    def revoke_token(self):
        """
        Invalidates Access Token `self.access_token`.
        """
        headers = {
            'Authorization': 'Basic {}'.format(self.bearer_credentials),
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        data = 'access_token={}'.format(self.access_token)

        try:
            response = requests.post(
                OAUTH2_TOKEN_URL, data=data, headers=headers, timeout=5)
        except RequestException:
            raise FailedRequestError

        if response.status_code != requests.codes.ok:
            raise KayakError('Invalid credentials. Could not revoke token.')

        access_token = self.access_token
        # Unset Access token
        self.access_token = ''

        return access_token
